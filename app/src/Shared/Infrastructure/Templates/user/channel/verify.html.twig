{% extends 'base.html.twig' %}

{% block title %}{{ parent() }} Верификация канала{% endblock %}

{% block body %}
    <div class="container-fluid py-3">
        <div class="row justify-content-center">
            <div class="col-12 col-sm-10 col-md-8 col-lg-6 col-xl-5">
                <div class="form-verification">
                    {# Единый блок для всех сообщений - flash и ошибок формы #}
                    <div id="messages-container">
                        {% for type, messages in app.flashes %}
                            {% for message in messages %}
                                <div class="alert alert-{{ type }} alert-dismissible fade show mb-3">
                                    <div class="d-flex align-items-center">
                                        <span>{{ message }}</span>
                                        <button type="button" class="btn-close ms-auto"
                                                data-bs-dismiss="alert"></button>
                                    </div>
                                </div>
                            {% endfor %}
                        {% endfor %}

                        {# Отображение ошибок формы как flash-сообщений #}
                        {% if verificationForm.vars.errors|length > 0 %}
                            {% for error in verificationForm.vars.errors %}
                                <div class="alert alert-danger alert-dismissible fade show mb-3">
                                    <div class="d-flex align-items-center">
                                        <span>{{ error.message }}</span>
                                        <button type="button" class="btn-close ms-auto"
                                                data-bs-dismiss="alert"></button>
                                    </div>
                                </div>
                            {% endfor %}
                        {% endif %}

                        {# Отображение ошибок полей формы #}
                        {% for child in verificationForm.children %}
                            {% if child.vars.errors is defined and child.vars.errors|length > 0 %}
                                {% for error in child.vars.errors %}
                                    <div class="alert alert-danger alert-dismissible fade show mb-3">
                                        <div class="d-flex align-items-center">
                                            <span>{{ error.message }}</span>
                                            <button type="button" class="btn-close ms-auto"
                                                    data-bs-dismiss="alert"></button>
                                        </div>
                                    </div>
                                {% endfor %}
                            {% endif %}
                        {% endfor %}
                    </div>

                    <div class="text-center mb-4">
                        <h1 class="h3 mb-2">Верификация аккаунта</h1>
                        <p class="text-muted">Подтвердите ваш канал связи</p>
                    </div>

                    {{ form_start(verificationForm, {
                        'attr': {
                            'class': 'needs-validation',
                            'novalidate': true,
                            'id': 'verification-form'
                        },
                        'action': path('app_user_channel_verification')
                    }) }}

                    <div class="mb-3">
                        <div class="form-floating">
                            {{ form_widget(verificationForm.channel, {
                                'attr': {
                                    'class': 'form-select' ~ (verificationForm.channel.vars.errors|length > 0 ? ' is-invalid' : ''),
                                    'onchange': 'onChannelChange(this)'
                                }
                            }) }}
                            {{ form_label(verificationForm.channel) }}
                        </div>
                        {# Убрали отображение ошибок под полем #}
                    </div>

                    <div class="mb-3">
                        <button type="button"
                                class="btn btn-outline-primary w-100 py-2"
                                id="send-token-btn"
                                onclick="sendVerificationToken()"
                                data-channel-id="">
                            <span id="send-btn-text">Отправить код верификации</span>
                            <span id="send-timer" class="ms-1"></span>
                        </button>
                    </div>

                    <div class="mb-4">
                        <div class="form-floating">
                            {{ form_widget(verificationForm.token, {
                                'attr': {
                                    'class': 'form-control text-center' ~ (verificationForm.token.vars.errors|length > 0 ? ' is-invalid' : ''),
                                    'style': 'letter-spacing: 0.3rem; font-weight: bold; height: 60px;',
                                    'placeholder': 'Введите код'
                                }
                            }) }}
                            {{ form_label(verificationForm.token) }}
                        </div>
                        {# Убрали отображение ошибок под полем #}
                    </div>

                    {{ form_rest(verificationForm) }}

                    <div class="mb-3">
                        <button class="btn btn-primary w-100 py-2" type="submit" id="submit-btn">
                            Подтвердить код
                        </button>
                    </div>

                    {{ form_end(verificationForm) }}
                </div>
            </div>
        </div>
    </div>

    <script>
        let cooldownInterval;
        let cooldownTimeLeft = 0;
        const sendTokenBtn = document.getElementById('send-token-btn');
        const sendBtnText = document.getElementById('send-btn-text');
        const sendTimer = document.getElementById('send-timer');
        const submitBtn = document.getElementById('submit-btn');
        const tokenInput = document.getElementById('{{ verificationForm.token.vars.id }}');
        const channelSelect = document.getElementById('{{ verificationForm.channel.vars.id }}');
        const form = document.getElementById('verification-form');
        const messagesContainer = document.getElementById('messages-container');

        // Проверяем состояние кнопки при загрузке страницы
        document.addEventListener('DOMContentLoaded', function () {
            checkCooldownState();

            // Активируем кнопку отправки, если канал уже выбран
            if (channelSelect.value) {
                sendTokenBtn.setAttribute('data-channel-id', channelSelect.value);
            }

            // Визуальная индикация для кнопки подтверждения
            tokenInput.addEventListener('input', function () {
                this.value = this.value.replace(/[^0-9]/g, '');

                if (this.value.length === 6) {
                    submitBtn.classList.remove('btn-secondary');
                    submitBtn.classList.add('btn-primary');
                } else {
                    submitBtn.classList.remove('btn-primary');
                    submitBtn.classList.add('btn-secondary');
                }
            });

            // Валидация формы при сабмите
            form.addEventListener('submit', function (e) {
                // Очищаем предыдущие сообщения
                clearMessages();

                // Проверяем длину кода
                if (tokenInput.value.length !== 6) {
                    e.preventDefault();
                    showMessage('Пожалуйста, введите 6-значный код', 'error');
                    tokenInput.focus();
                    return;
                }

                // Проверяем выбран ли канал
                const channelId = sendTokenBtn.getAttribute('data-channel-id');
                if (!channelId) {
                    e.preventDefault();
                    showMessage('Пожалуйста, выберите канал для верификации', 'error');
                }
            });
        });

        function onChannelChange(select) {
            const selectedOption = select.options[select.selectedIndex];
            if (selectedOption.value) {
                sendTokenBtn.setAttribute('data-channel-id', selectedOption.value);
                tokenInput.focus();
            } else {
                sendTokenBtn.setAttribute('data-channel-id', '');
            }
        }

        function sendVerificationToken() {
            if (cooldownTimeLeft > 0) return;

            const channelId = sendTokenBtn.getAttribute('data-channel-id');
            if (!channelId) {
                showMessage('Пожалуйста, выберите канал для верификации', 'error');
                return;
            }

            const originalText = sendBtnText.innerHTML;
            sendTokenBtn.disabled = true;
            sendBtnText.innerHTML = 'Отправка...';

            // Очищаем предыдущие сообщения перед отправкой
            clearMessages();

            fetch('{{ path('app_user_channel_verification_send_token') }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                    channel_id: channelId
                })
            })
                .then(response => response.json())
                .then(data => {
                    const responseData = data.data || data;

console.log( responseData, responseData.data?.cooldown_remaining)
                    if (responseData.success) {
                        const cooldown = responseData.data?.cooldown_remaining || 300;
                        startCooldown(cooldown);
                        showMessage('Код верификации отправлен! Проверьте ваш канал связи.', 'success');
                        tokenInput.focus();
                    } else {
                        showMessage(responseData.message || 'Ошибка при отправке кода', 'error');
                        sendTokenBtn.disabled = false;
                        sendBtnText.innerHTML = originalText;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('Ошибка при отправке кода. Попробуйте позже.', 'error');
                    sendTokenBtn.disabled = false;
                    sendBtnText.innerHTML = originalText;
                });
        }

        function startCooldown(seconds) {
            cooldownTimeLeft = seconds;

            clearInterval(cooldownInterval);
            cooldownInterval = setInterval(() => {
                cooldownTimeLeft--;

                if (cooldownTimeLeft <= 0) {
                    clearInterval(cooldownInterval);
                    sendTokenBtn.disabled = false;
                    sendBtnText.innerHTML = 'Отправить код верификации';
                    sendTimer.innerHTML = '';
                    localStorage.removeItem('verification_cooldown');
                } else {
                    const minutes = Math.floor(cooldownTimeLeft / 60);
                    const seconds = cooldownTimeLeft % 60;
                    sendTimer.innerHTML = `(${minutes}:${seconds.toString().padStart(2, '0')})`;
                    sendBtnText.innerHTML = 'Отправить повторно';
                    sendTokenBtn.disabled = true;

                    // Сохраняем состояние в localStorage
                    localStorage.setItem('verification_cooldown',
                        JSON.stringify({
                            expires: Date.now() + cooldownTimeLeft * 1000,
                            timeLeft: cooldownTimeLeft
                        })
                    );
                }
            }, 1000);
        }

        function checkCooldownState() {
            const cooldownData = localStorage.getItem('verification_cooldown');
            if (cooldownData) {
                const data = JSON.parse(cooldownData);
                const timeLeft = Math.max(0, Math.floor((data.expires - Date.now()) / 1000));

                if (timeLeft > 0) {
                    startCooldown(timeLeft);
                } else {
                    localStorage.removeItem('verification_cooldown');
                }
            }
        }

        function showMessage(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show mb-3`;
            alertDiv.innerHTML = `
                <div class="d-flex align-items-center">
                    <span>${message}</span>
                    <button type="button" class="btn-close ms-auto" data-bs-dismiss="alert"></button>
                </div>
            `;

            messagesContainer.insertBefore(alertDiv, messagesContainer.firstChild);

            // Автоматическое скрытие для success сообщений
            if (type === 'success') {
                setTimeout(() => {
                    if (alertDiv.parentElement) {
                        alertDiv.remove();
                    }
                }, 5000);
            }
        }

        function clearMessages() {
            // Очищаем только динамически добавленные сообщения (не flash)
            const dynamicAlerts = messagesContainer.querySelectorAll('.alert');
            dynamicAlerts.forEach(alert => {
                // Не удаляем flash-сообщения, которые пришли с сервера
                if (!alert.hasAttribute('data-flash')) {
                    alert.remove();
                }
            });
        }
    </script>

    <style>
        .form-verification {
            background: #f8f9fa;
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.1);
        }

        @media (max-width: 576px) {
            .form-verification {
                padding: 1rem;
                margin: 0.5rem;
                border-radius: 8px;
            }

            .container-fluid {
                padding-left: 0.5rem;
                padding-right: 0.5rem;
            }

            .btn {
                font-size: 0.9rem;
                padding: 0.5rem 0.75rem;
            }
        }

        #send-token-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        #submit-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .form-floating > .form-control {
            height: calc(3rem + 2px);
        }

        .text-truncate {
            max-width: 150px;
            display: inline-block;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            vertical-align: bottom;
        }

        /* Стили для инвалидных полей (только визуальные) */
        .is-invalid {
            border-color: #dc3545;
        }

        .is-invalid:focus {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }
    </style>
{% endblock %}