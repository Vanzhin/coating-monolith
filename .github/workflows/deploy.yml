name: Build and Deploy

on:
  push:
    tags:
      - 'v*'  # Только теги, начинающиеся с 'v'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: vanzhin/coating-monolith

jobs:
  build:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [php-fpm, php-cli, supervisor]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=tag

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            INSTALL_XDEBUG=${{ vars.INSTALL_XDEBUG || 'false' }}
            APP_SECRET=${{ secrets.APP_SECRET }}
            APP_NAME=${{ vars.APP_NAME }}
            DEFAULT_FROM_ADDR=${{ vars.DEFAULT_FROM_ADDR }}
            DEFAULT_FROM_NAME=${{ vars.DEFAULT_FROM_NAME }}
            MAILER_DSN=${{ vars.MAILER_DSN }}
            JWT_SECRET_KEY=${{ vars.JWT_SECRET_KEY }}
            JWT_PUBLIC_KEY=${{ vars.JWT_PUBLIC_KEY }}
            JWT_PASSPHRASE=${{ secrets.JWT_PASSPHRASE }}
            LOG_TELEGRAM_BOT_KEY=${{ secrets.LOG_TELEGRAM_BOT_KEY }}
            LOG_TELEGRAM_CHANNEL=${{ vars.LOG_TELEGRAM_CHANNEL }}
            DB_HOST=${{ vars.DB_HOST || 'manager_db' }}
            DB_PORT=${{ vars.DB_PORT || '5432' }}
            DB_NAME=${{ vars.DB_NAME }}
            DB_USER=${{ vars.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            REDIS_HOST=${{ vars.REDIS_HOST || 'manager_redis' }}
            ELASTIC_DSN=${{ vars.ELASTIC_DSN }}
            ELASTIC_USERNAME=${{ vars.ELASTIC_USERNAME }}
            ELASTIC_PASSWORD=${{ secrets.ELASTIC_PASSWORD }}

  seamless-deploy:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy with zero downtime
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}  # ← ДОБАВЛЕНО
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/www/sites/1helper
            
            # Login to registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            export TAG="${{ github.ref_name }}"
            echo "Starting zero-downtime deployment of version: $TAG"
            
            # 1. Pull new images in background
            echo "Step 1: Pulling new images..."
            docker compose -f docker-compose.prod.yml pull &
            PULL_PID=$!
            
            # 2. Warm up phase - prepare everything while old version is running
            echo "Step 2: Warm up phase..."
            
            # Create temporary containers for warm up
            docker compose -f docker-compose.prod.yml -p coating_temp create manager_php-cli
            docker compose -f docker-compose.prod.yml -p coating_temp start manager_db manager_redis elasticsearch
            
            # Wait for database
            timeout 60s bash -c 'until docker compose -f docker-compose.prod.yml -p coating_temp exec -T manager_db pg_isready -U ${{ vars.DB_USER }} -d ${{ vars.DB_NAME }}; do sleep 2; done'
            
            # Run migrations on temporary container
            docker compose -f docker-compose.prod.yml -p coating_temp run --rm manager_php-cli php bin/console doctrine:migrations:migrate --no-interaction
            
            # Warm up cache on temporary container
            docker compose -f docker-compose.prod.yml -p coating_temp run --rm manager_php-cli php bin/console cache:warmup
            
            # Cleanup temporary containers
            docker compose -f docker-compose.prod.yml -p coating_temp down
            
            # 3. Wait for image pull to complete
            echo "Step 3: Waiting for image pull to complete..."
            wait $PULL_PID
            
            # 4. Zero-downtime deployment with health checks
            echo "Step 4: Starting rolling update..."
            
            # Update PHP-CLI first (non-critical service)
            docker compose -f docker-compose.prod.yml up -d --no-deps manager_php-cli
            
            # Update PHP-FPM with health check
            docker compose -f docker-compose.prod.yml up -d --no-deps manager_php-fpm
            
            # Wait for PHP-FPM to be ready
            echo "Waiting for PHP-FPM to be ready..."
            timeout 30s bash -c 'until docker compose -f docker-compose.prod.yml exec -T manager_php-fpm php -r "exit(0);"; do sleep 2; done'
            
            # Update Supervisor
            docker compose -f docker-compose.prod.yml up -d --no-deps manager_supervisor
            
            # 5. Final checks and cleanup
            echo "Step 5: Final checks..."
            
            # Health check
            echo "Performing health check..."
            timeout 30s bash -c 'until curl -f http://localhost/health-check > /dev/null 2>&1; do sleep 2; done'
            
            # Remove old images
            echo "Cleaning up old images..."
            docker image prune -f
            
            echo "Zero-downtime deployment completed successfully!"